{"version":3,"mappings":"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","names":["fetchAuthSetup","response","authSetup","useLogin","msalConfig","loginRequest","tokenRequest","getToken","client","error","LoginButton","instance","useMsal","activeAccount","handleLoginPopup","handleLogoutPopup","logoutText","jsx","DefaultButton","styles","Layout","jsxs","NavLink","isActive","Outlet","BACKEND_URI","getHeaders","idToken","headers","chatApi","options","url","getCitationFilePath","citation","Approaches","RetrievalMode","parseAnswerToHtml","answer","isStreaming","onCitationClicked","citations","followupQuestions","parsedAnswer","match","content","lastIndex","part","index","citationIndex","path","renderToStaticMarkup","Answer","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","showFollowupQuestions","useMemo","sanitizedAnswerHtml","DOMPurify","Stack","x","i","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","onRetry","ErrorCircle24Regular","PrimaryButton","QuestionInput","onSend","disabled","placeholder","clearOnSend","question","setQuestion","useState","sendQuestion","onEnterPress","ev","onQuestionChange","_ev","newValue","sendQuestionDisabled","TextField","Tooltip","Button","Send28Filled","Example","text","value","onClick","EXAMPLES","ExampleList","onExampleClicked","UserChatMessage","message","AnalysisPanelTabs","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledCitationTab","Pivot","pivotItem","PivotItem","ClearChatButton","Delete24Regular","TokenClaimsDisplay","ToString","a","items","key","columns","createTableColumn","b","item","Label","DataGrid","DataGridHeader","DataGridRow","renderHeaderCell","DataGridHeaderCell","DataGridBody","rowId","renderCell","DataGridCell","Chat","isConfigPanelOpen","setIsConfigPanelOpen","promptTemplate","setPromptTemplate","retrieveCount","setRetrieveCount","retrievalMode","setRetrievalMode","useSemanticRanker","setUseSemanticRanker","shouldStream","setShouldStream","useSemanticCaptions","setUseSemanticCaptions","excludeCategory","setExcludeCategory","useSuggestFollowupQuestions","setUseSuggestFollowupQuestions","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","lastQuestionRef","useRef","chatMessageStreamEnd","isLoading","setIsLoading","setIsStreaming","setError","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","answers","setAnswers","streamedAnswers","setStreamedAnswers","handleAsyncRequest","responseBody","askResponse","updateState","newContent","resolve","latestResponse","event","readNDJSONStream","makeApiRequest","token","request","parsedResponse","e","clearChat","useEffect","onRetrievalModeChange","option","onUseSemanticRankerChange","checked","onShouldStreamChange","onUseOidSecurityFilterChange","onUseGroupsSecurityFilterChange","example","onShowCitation","onToggleTab","tab","streamedAnswer","c","q","Fragment","Checkbox","Panel","Dropdown","layout","msalInstance","PublicClientApplication","EventType","account","MsalProvider","initializeIcons","router","createHashRouter","ReactDOM","React","RouterProvider"],"sources":["../../../frontend/src/authConfig.ts","../../../frontend/src/components/LoginButton/LoginButton.tsx","../../../frontend/src/pages/layout/Layout.tsx","../../../frontend/src/api/api.ts","../../../frontend/src/api/models.ts","../../../frontend/src/components/Answer/AnswerParser.tsx","../../../frontend/src/components/Answer/Answer.tsx","../../../frontend/src/components/Answer/AnswerLoading.tsx","../../../frontend/src/components/Answer/AnswerError.tsx","../../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../../frontend/src/components/Example/Example.tsx","../../../frontend/src/components/Example/ExampleList.tsx","../../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../../frontend/src/components/TokenClaimsDisplay/TokenClaimsDisplay.tsx","../../../frontend/src/pages/chat/Chat.tsx","../../../frontend/src/index.tsx"],"sourcesContent":["// Refactored from https://github.com/Azure-Samples/ms-identity-javascript-react-tutorial/blob/main/1-Authentication/1-sign-in/SPA/src/authConfig.js\n\nimport { AuthenticationResult, IPublicClientApplication } from \"@azure/msal-browser\";\n\ninterface AuthSetup {\n    // Set to true if login elements should be shown in the UI\n    useLogin: boolean;\n    /**\n     * Configuration object to be passed to MSAL instance on creation.\n     * For a full list of MSAL.js configuration parameters, visit:\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\n     */\n    msalConfig: {\n        auth: {\n            clientId: string, // Client app id used for login\n            authority: string, // Directory to use for login https://learn.microsoft.com/azure/active-directory/develop/msal-client-application-configuration#authority\n            redirectUri: string, // Points to window.location.origin. You must register this URI on Azure Portal/App Registration.\n            postLogoutRedirectUri: string, // Indicates the page to navigate after logout.\n            navigateToLoginRequestUrl: boolean // If \"true\", will navigate back to the original request location before processing the auth code response.\n        },\n        cache: {\n            cacheLocation: string, // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\n            storeAuthStateInCookie: boolean // Set this to \"true\" if you are having issues on IE11 or Edge\n        }\n    },\n    loginRequest: {\n        /**\n         * Scopes you add here will be prompted for user consent during sign-in.\n         * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n         * For more information about OIDC scopes, visit:\n         * https://docs.microsoft.com/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\n         */\n        scopes: Array<string>\n    },\n    tokenRequest: {\n        scopes: Array<string>\n    }\n}\n\n// Fetch the auth setup JSON data from the API if not already cached\nasync function fetchAuthSetup(): Promise<AuthSetup> {\n    const response = await fetch('/auth_setup');\n    if (!response.ok) {\n        throw new Error(`auth setup response was not ok: ${response.status}`);\n    }\n    return await response.json();\n}\n\nconst authSetup = await fetchAuthSetup();\n\nexport const useLogin = authSetup.useLogin;\n\n/**\n * Configuration object to be passed to MSAL instance on creation.\n * For a full list of MSAL.js configuration parameters, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\n */\nexport const msalConfig = authSetup.msalConfig;\n\n/**\n * Scopes you add here will be prompted for user consent during sign-in.\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n * For more information about OIDC scopes, visit:\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\n */\nexport const loginRequest = authSetup.loginRequest;\n\nconst tokenRequest = authSetup.tokenRequest;\n\n// Get an access token for use with the API server.\n// ID token received when logging in may not be used for this purpose because it has the incorrect audience\nexport const getToken = (client: IPublicClientApplication): Promise<AuthenticationResult | undefined> => {\n    return client.acquireTokenSilent({\n        ...tokenRequest,\n        redirectUri: authSetup.msalConfig.auth.redirectUri\n    })\n    .catch((error) => {\n        console.log(error);\n        return undefined;\n    })\n}\n","import { DefaultButton } from '@fluentui/react';\nimport { useMsal } from '@azure/msal-react';\n\nimport styles from \"./LoginButton.module.css\";\nimport { loginRequest } from '../../authConfig';\n\n\nexport const LoginButton = () => {\n  const { instance } = useMsal();\n  const activeAccount = instance.getActiveAccount();\n  const handleLoginPopup = () => {\n      /**\n       * When using popup and silent APIs, we recommend setting the redirectUri to a blank page or a page\n       * that does not implement MSAL. Keep in mind that all redirect routes must be registered with the application\n       * For more information, please follow this link: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#redirecturi-considerations\n       */\n      instance\n          .loginPopup({\n              ...loginRequest,\n              redirectUri: '/redirect',\n          })\n          .catch((error) => console.log(error));\n  };\n  const handleLogoutPopup = () => {\n    instance\n        .logoutPopup({\n            mainWindowRedirectUri: '/', // redirects the top level app after logout\n            account: instance.getActiveAccount(),\n        })\n        .catch((error) => console.log(error));\n  };\n  const logoutText = `Logout\\n${activeAccount?.username}`\n  return (\n      <DefaultButton\n        text={activeAccount ? logoutText : \"Login\"}\n        className={styles.loginButton}\n        onClick={activeAccount ? handleLogoutPopup : handleLoginPopup}>\n      </DefaultButton>\n  )\n};\n","import { Outlet, NavLink, Link } from \"react-router-dom\";\n\nimport github from \"../../assets/github.svg\";\n\nimport styles from \"./Layout.module.css\";\n\nimport { useLogin } from \"../../authConfig\";\n\nimport { LoginButton } from \"../../components/LoginButton\";\n\nconst Layout = () => {\n    return (\n        <div className={styles.layout}>\n            <header className={styles.header} role={\"banner\"}>\n                <div className={styles.headerContainer}>\n                    {/* <Link to=\"/\" className={styles.headerTitleContainer}>\n                        <h3 className={styles.headerTitle}>CognitiveAI</h3>\n                    </Link> */}\n                    <nav>\n                        <ul className={styles.headerNavList}>\n                            <li>\n                                <NavLink to=\"/\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\n                                    Chat\n                                </NavLink>\n                            </li>\n                            <li className={styles.headerNavLeftMargin}>\n                                <NavLink to=\"/qa\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\n                                    Generate\n                                </NavLink>\n                            </li>\n                            {/* <li className={styles.headerNavLeftMargin}>\n                                <a href=\"https://github.com/IMPranshu\" target={\"_blank\"} title=\"Github repository link\">\n                                    <img\n                                        src={github}\n                                        alt=\"Github logo\"\n                                        aria-label=\"Link to github repository\"\n                                        width=\"20px\"\n                                        height=\"20px\"\n                                        className={styles.githubLogo}\n                                    />\n                                </a>\n                            </li> */}\n                        </ul>\n                    </nav>\n                    {/* <h4 className={styles.headerRightText}>Azure OpenAI + Cognitive Search</h4> */}\n                    {useLogin && <LoginButton />}\n                </div>\n            </header>\n\n            <Outlet />\n        </div>\n    );\n};\n\nexport default Layout;\n","const BACKEND_URI = \"\";\n\nimport { AskRequest, AskResponse, ChatRequest } from \"./models\";\nimport { useLogin } from \"../authConfig\";\n\nfunction getHeaders(idToken: string | undefined): Record<string, string> {\n    var headers : Record<string, string> = {\n        \"Content-Type\": \"application/json\"\n    };\n    // If using login, add the id token of the logged in account as the authorization\n    if (useLogin) {\n        if (idToken) {\n            headers[\"Authorization\"] = `Bearer ${idToken}`\n        }\n    }\n\n    return headers;\n}\n\nexport async function askApi(options: AskRequest): Promise<AskResponse> {\n    const response = await fetch(`${BACKEND_URI}/ask`, {\n        method: \"POST\",\n        headers: getHeaders(options.idToken),\n        body: JSON.stringify({\n            question: options.question,\n            approach: options.approach,\n            overrides: {\n                retrieval_mode: options.overrides?.retrievalMode,\n                semantic_ranker: options.overrides?.semanticRanker,\n                semantic_captions: options.overrides?.semanticCaptions,\n                top: options.overrides?.top,\n                temperature: options.overrides?.temperature,\n                prompt_template: options.overrides?.promptTemplate,\n                prompt_template_prefix: options.overrides?.promptTemplatePrefix,\n                prompt_template_suffix: options.overrides?.promptTemplateSuffix,\n                exclude_category: options.overrides?.excludeCategory,\n                use_oid_security_filter: options.overrides?.useOidSecurityFilter,\n                use_groups_security_filter: options.overrides?.useGroupsSecurityFilter\n            }\n        })\n    });\n\n    const parsedResponse: AskResponse = await response.json();\n    if (response.status > 299 || !response.ok) {\n        throw Error(parsedResponse.error || \"Unknown error\");\n    }\n\n    return parsedResponse;\n}\n\nexport async function chatApi(options: ChatRequest): Promise<Response> {\n    const url = options.shouldStream ? \"chat_stream\" : \"chat\";\n    return await fetch(`${BACKEND_URI}/${url}`, {\n        method: \"POST\",\n        headers: getHeaders(options.idToken),\n        body: JSON.stringify({\n            history: options.history,\n            approach: options.approach,\n            overrides: {\n                retrieval_mode: options.overrides?.retrievalMode,\n                semantic_ranker: options.overrides?.semanticRanker,\n                semantic_captions: options.overrides?.semanticCaptions,\n                top: options.overrides?.top,\n                temperature: options.overrides?.temperature,\n                prompt_template: options.overrides?.promptTemplate,\n                prompt_template_prefix: options.overrides?.promptTemplatePrefix,\n                prompt_template_suffix: options.overrides?.promptTemplateSuffix,\n                exclude_category: options.overrides?.excludeCategory,\n                suggest_followup_questions: options.overrides?.suggestFollowupQuestions,\n                use_oid_security_filter: options.overrides?.useOidSecurityFilter,\n                use_groups_security_filter: options.overrides?.useGroupsSecurityFilter\n            }\n        })\n    });\n}\n\nexport function getCitationFilePath(citation: string): string {\n    return `${BACKEND_URI}/content/${citation}`;\n}\n","export const enum Approaches {\n    RetrieveThenRead = \"rtr\",\n    ReadRetrieveRead = \"rrr\",\n    ReadDecomposeAsk = \"rda\"\n}\n\nexport const enum RetrievalMode {\n    Hybrid = \"hybrid\",\n    Vectors = \"vectors\",\n    Text = \"text\"\n}\n\nexport type AskRequestOverrides = {\n    retrievalMode?: RetrievalMode;\n    semanticRanker?: boolean;\n    semanticCaptions?: boolean;\n    excludeCategory?: string;\n    top?: number;\n    temperature?: number;\n    promptTemplate?: string;\n    promptTemplatePrefix?: string;\n    promptTemplateSuffix?: string;\n    suggestFollowupQuestions?: boolean;\n    useOidSecurityFilter?: boolean;\n    useGroupsSecurityFilter?: boolean;\n};\n\nexport type AskRequest = {\n    question: string;\n    approach: Approaches;\n    overrides?: AskRequestOverrides;\n    idToken?: string;\n};\n\nexport type AskResponse = {\n    answer: string;\n    thoughts: string | null;\n    data_points: string[];\n    error?: string;\n};\n\nexport type ChatTurn = {\n    user: string;\n    bot?: string;\n};\n\nexport type ChatRequest = {\n    history: ChatTurn[];\n    approach: Approaches;\n    overrides?: AskRequestOverrides;\n    idToken?: string;\n    shouldStream?: boolean;\n};\n","import { renderToStaticMarkup } from \"react-dom/server\";\nimport { getCitationFilePath } from \"../../api\";\n\ntype HtmlParsedAnswer = {\n    answerHtml: string;\n    citations: string[];\n    followupQuestions: string[];\n};\n\nexport function parseAnswerToHtml(answer: string, isStreaming: boolean, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\n    const citations: string[] = [];\n    const followupQuestions: string[] = [];\n\n    // Extract any follow-up questions that might be in the answer\n    let parsedAnswer = answer.replace(/<<([^>>]+)>>/g, (match, content) => {\n        followupQuestions.push(content);\n        return \"\";\n    });\n\n    // trim any whitespace from the end of the answer after removing follow-up questions\n    parsedAnswer = parsedAnswer.trim();\n\n    // Omit a citation that is still being typed during streaming\n    if (isStreaming){\n        let lastIndex = parsedAnswer.length;\n        for (let i = parsedAnswer.length - 1; i >= 0; i--) {\n            if (parsedAnswer[i] === ']') {\n                break;\n            } else if (parsedAnswer[i] === '[') {\n                lastIndex = i;\n                break;\n            }\n        }\n        const truncatedAnswer = parsedAnswer.substring(0, lastIndex);\n        parsedAnswer = truncatedAnswer;\n    } \n\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\n\n    const fragments: string[] = parts.map((part, index) => {\n        if (index % 2 === 0) {\n            return part;\n        } else {\n            let citationIndex: number;\n            if (citations.indexOf(part) !== -1) {\n                citationIndex = citations.indexOf(part) + 1;\n            } else {\n                citations.push(part);\n                citationIndex = citations.length;\n            }\n\n            const path = getCitationFilePath(part);\n\n            return renderToStaticMarkup(\n                <a className=\"supContainer\" title={part} onClick={() => onCitationClicked(path)}>\n                    <sup>{citationIndex}</sup>\n                </a>\n            );\n        }\n    });\n\n    return {\n        answerHtml: fragments.join(\"\"),\n        citations,\n        followupQuestions\n    };\n}\n","import { useMemo } from \"react\";\nimport { Stack, IconButton } from \"@fluentui/react\";\nimport DOMPurify from \"dompurify\";\n\nimport styles from \"./Answer.module.css\";\n\nimport { AskResponse, getCitationFilePath } from \"../../api\";\nimport { parseAnswerToHtml } from \"./AnswerParser\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\ninterface Props {\n    answer: AskResponse;\n    isSelected?: boolean;\n    isStreaming: boolean;\n    onCitationClicked: (filePath: string) => void;\n    onThoughtProcessClicked: () => void;\n    onSupportingContentClicked: () => void;\n    onFollowupQuestionClicked?: (question: string) => void;\n    showFollowupQuestions?: boolean;\n}\n\nexport const Answer = ({\n    answer,\n    isSelected,\n    isStreaming,\n    onCitationClicked,\n    onThoughtProcessClicked,\n    onSupportingContentClicked,\n    onFollowupQuestionClicked,\n    showFollowupQuestions\n}: Props) => {\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(answer.answer, isStreaming, onCitationClicked), [answer]);\n\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\n\n    return (\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\n            {/* <Stack.Item>\n                <Stack horizontal horizontalAlign=\"space-between\">\n                    <AnswerIcon />\n                    <div>\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"Lightbulb\" }}\n                            title=\"Show thought process\"\n                            ariaLabel=\"Show thought process\"\n                            onClick={() => onThoughtProcessClicked()}\n                            disabled={!answer.thoughts}\n                        />\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"ClipboardList\" }}\n                            title=\"Show supporting content\"\n                            ariaLabel=\"Show supporting content\"\n                            onClick={() => onSupportingContentClicked()}\n                            disabled={!answer.data_points?.length}\n                        />\n                    </div>\n                </Stack>\n            </Stack.Item> */}\n\n            <Stack.Item grow>\n                <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: sanitizedAnswerHtml }}></div>\n            </Stack.Item>\n\n            {!!parsedAnswer.citations.length && (\n                <Stack.Item>\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\n                        <span className={styles.citationLearnMore}>Citations:</span>\n                        {parsedAnswer.citations.map((x, i) => {\n                            const path = getCitationFilePath(x);\n                            return (\n                                <a key={i} className={styles.citation} title={x} onClick={() => onCitationClicked(path)}>\n                                    {`${++i}. ${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n\n            {!!parsedAnswer.followupQuestions.length && showFollowupQuestions && onFollowupQuestionClicked && (\n                <Stack.Item>\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\n                        <span className={styles.followupQuestionLearnMore}>Follow-up questions:</span>\n                        {parsedAnswer.followupQuestions.map((x, i) => {\n                            return (\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\n                                    {`${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n        </Stack>\n    );\n};\n","import { Stack } from \"@fluentui/react\";\nimport { animated, useSpring } from \"@react-spring/web\";\n\nimport styles from \"./Answer.module.css\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\nexport const AnswerLoading = () => {\n    const animatedStyles = useSpring({\n        from: { opacity: 0 },\n        to: { opacity: 1 }\n    });\n\n    return (\n        <animated.div style={{ ...animatedStyles }}>\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n                {/* <AnswerIcon /> */}\n                <Stack.Item grow>\n                    <p className={styles.answerText}>\n                        Generating answer\n                        <span className={styles.loadingdots} />\n                    </p>\n                </Stack.Item>\n            </Stack>\n        </animated.div>\n    );\n};\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\n\nimport styles from \"./Answer.module.css\";\n\ninterface Props {\n    error: string;\n    onRetry: () => void;\n}\n\nexport const AnswerError = ({ error, onRetry }: Props) => {\n    return (\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\n\n            <Stack.Item grow>\n                <p className={styles.answerText}>{error}</p>\n            </Stack.Item>\n\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\n        </Stack>\n    );\n};\n","import { useState } from \"react\";\nimport { Stack, TextField } from \"@fluentui/react\";\nimport { Button, Tooltip, Field, Textarea } from \"@fluentui/react-components\";\nimport { Send28Filled } from \"@fluentui/react-icons\";\n\nimport styles from \"./QuestionInput.module.css\";\n\ninterface Props {\n    onSend: (question: string) => void;\n    disabled: boolean;\n    placeholder?: string;\n    clearOnSend?: boolean;\n}\n\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend }: Props) => {\n    const [question, setQuestion] = useState<string>(\"\");\n\n    const sendQuestion = () => {\n        if (disabled || !question.trim()) {\n            return;\n        }\n\n        onSend(question);\n\n        if (clearOnSend) {\n            setQuestion(\"\");\n        }\n    };\n\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\n            ev.preventDefault();\n            sendQuestion();\n        }\n    };\n\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        if (!newValue) {\n            setQuestion(\"\");\n        } else if (newValue.length <= 1000) {\n            setQuestion(newValue);\n        }\n    };\n\n    const sendQuestionDisabled = disabled || !question.trim();\n\n    return (\n        <Stack horizontal className={styles.questionInputContainer}>\n            <TextField\n                className={styles.questionInputTextArea}\n                placeholder={placeholder}\n                multiline\n                resizable={false}\n                borderless\n                value={question}\n                onChange={onQuestionChange}\n                onKeyDown={onEnterPress}\n            />\n            <div className={styles.questionInputButtonsContainer}>\n                <Tooltip content=\"Ask question button\" relationship=\"label\">\n                    <Button size=\"large\" icon={<Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} disabled={sendQuestionDisabled} onClick={sendQuestion} />\n                </Tooltip>\n            </div>\n        </Stack>\n    );\n};\n","import styles from \"./Example.module.css\";\n\ninterface Props {\n    text: string;\n    value: string;\n    onClick: (value: string) => void;\n}\n\nexport const Example = ({ text, value, onClick }: Props) => {\n    return (\n        <div className={styles.example} onClick={() => onClick(value)}>\n            <p className={styles.exampleText}>{text}</p>\n        </div>\n    );\n};\n","import { Example } from \"./Example\";\n\nimport styles from \"./Example.module.css\";\n\nexport type ExampleModel = {\n    text: string;\n    value: string;\n};\n\nconst EXAMPLES: ExampleModel[] = [\n    {\n        text: \"Tell me something about WBSO.\",\n        value: \"Tell me something about WBSO\"\n    },\n    { text: \"Explain benefits of starting a business here.\", value: \"Explain benefits of starting a business here.\" },\n    { text: \"Pros of WBSO\", value: \"Pros of WBSO\" }\n];\n\ninterface Props {\n    onExampleClicked: (value: string) => void;\n}\n\nexport const ExampleList = ({ onExampleClicked }: Props) => {\n    return (\n        <ul className={styles.examplesNavList}>\n            {EXAMPLES.map((x, i) => (\n                <li key={i}>\n                    <Example text={x.text} value={x.value} onClick={onExampleClicked} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import styles from \"./UserChatMessage.module.css\";\n\ninterface Props {\n    message: string;\n}\n\nexport const UserChatMessage = ({ message }: Props) => {\n    return (\n        <div className={styles.container}>\n            <div className={styles.message}>{message}</div>\n        </div>\n    );\n};\n","export enum AnalysisPanelTabs {\n    ThoughtProcessTab = \"thoughtProcess\",\n    SupportingContentTab = \"supportingContent\",\n    CitationTab = \"citation\"\n}\n","import { Pivot, PivotItem } from \"@fluentui/react\";\nimport DOMPurify from \"dompurify\";\n\nimport styles from \"./AnalysisPanel.module.css\";\n\nimport { SupportingContent } from \"../SupportingContent\";\nimport { AskResponse } from \"../../api\";\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\n\ninterface Props {\n    className: string;\n    activeTab: AnalysisPanelTabs;\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\n    activeCitation: string | undefined;\n    citationHeight: string;\n    answer: AskResponse;\n}\n\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\n\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\n    const isDisabledThoughtProcessTab: boolean = !answer.thoughts;\n    const isDisabledSupportingContentTab: boolean = !answer.data_points.length;\n    const isDisabledCitationTab: boolean = !activeCitation;\n\n    const sanitizedThoughts = DOMPurify.sanitize(answer.thoughts!);\n\n    return (\n        <Pivot\n            className={className}\n            selectedKey={activeTab}\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\n        >\n            {/* <PivotItem\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\n                headerText=\"Thought process\"\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\n            >\n                <div className={styles.thoughtProcess} dangerouslySetInnerHTML={{ __html: sanitizedThoughts }}></div>\n            </PivotItem> */}\n            {/* <PivotItem\n                itemKey={AnalysisPanelTabs.SupportingContentTab}\n                headerText=\"Supporting content\"\n                headerButtonProps={isDisabledSupportingContentTab ? pivotItemDisabledStyle : undefined}\n            >\n                <SupportingContent supportingContent={answer.data_points} />\n            </PivotItem> */}\n            <PivotItem\n                itemKey={AnalysisPanelTabs.CitationTab}\n                headerText=\"Citation\"\n                headerButtonProps={isDisabledCitationTab ? pivotItemDisabledStyle : undefined}\n            >\n                <iframe title=\"Citation\" src={activeCitation} width=\"100%\" height={citationHeight} />\n            </PivotItem>\n        </Pivot>\n    );\n};\n","import { Delete24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\n\nimport styles from \"./ClearChatButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Delete24Regular />} disabled={disabled} onClick={onClick}>\n                {\"Clear chat\"}\n            </Button>\n        </div>\n    );\n};\n","import { Label } from '@fluentui/react';\nimport { useMsal } from '@azure/msal-react';\nimport {\n    DataGridBody,\n    DataGridRow,\n    DataGrid,\n    DataGridHeader,\n    DataGridHeaderCell,\n    DataGridCell,\n    createTableColumn,\n    TableColumnDefinition\n} from '@fluentui/react-table';\n\ntype Claim = {\n    name: string;\n    value: string;\n}\n\n\nexport const TokenClaimsDisplay = () => {\n    const { instance } = useMsal();\n    const activeAccount = instance.getActiveAccount();\n\n    const ToString = (a: string | any) => {\n        if (typeof a === 'string') {\n            return a;\n        } else {\n            return JSON.stringify(a);\n        }\n    };\n\n    const items: Claim[] = activeAccount?.idTokenClaims ?\n        Object.keys(activeAccount.idTokenClaims).map<Claim>(\n            (key: string) => { return { name: key, value: ToString((activeAccount.idTokenClaims ?? {})[key]) }; }) :\n        []\n\n    const columns: TableColumnDefinition<Claim>[] = [\n        createTableColumn<Claim>({\n            columnId: 'name',\n            compare: (a: Claim, b: Claim) => {\n                return a.name.localeCompare(b.name);\n            },\n            renderHeaderCell: () => {\n                return 'Name';\n            },\n            renderCell: item => {\n                return item.name\n            },\n        }),\n        createTableColumn<Claim>({\n            columnId: 'value',\n            compare: (a: Claim, b: Claim) => {\n                return a.value.localeCompare(b.value);\n            },\n            renderHeaderCell: () => {\n                return 'Value';\n            },\n            renderCell: item => {\n                return item.value\n            },\n        })\n    ]\n\n    return (\n        <div>\n            <Label>ID Token Claims</Label>\n            <DataGrid\n                items={items}\n                columns={columns}\n                sortable\n                getRowId={item => item.name}\n            >\n                <DataGridHeader>\n                <DataGridRow>\n                    {({ renderHeaderCell }) => <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>}\n                </DataGridRow>\n                </DataGridHeader>\n                <DataGridBody<Claim>>\n                {({ item, rowId }) => (\n                    <DataGridRow<Claim> key={rowId}>\n                    {({ renderCell }) => <DataGridCell>{renderCell(item)}</DataGridCell>}\n                    </DataGridRow>\n                )}\n                </DataGridBody>\n            </DataGrid>\n        </div>\n    )\n};\n","import { useRef, useState, useEffect } from \"react\";\nimport { Checkbox, Panel, DefaultButton, TextField, SpinButton, Dropdown, IDropdownOption } from \"@fluentui/react\";\nimport { SparkleFilled } from \"@fluentui/react-icons\";\nimport readNDJSONStream from \"ndjson-readablestream\";\n\nimport styles from \"./Chat.module.css\";\n\nimport { chatApi, RetrievalMode, Approaches, AskResponse, ChatRequest, ChatTurn } from \"../../api\";\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { SettingsButton } from \"../../components/SettingsButton\";\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\nimport { useLogin, getToken } from \"../../authConfig\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\n\nconst Chat = () => {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\n    const [shouldStream, setShouldStream] = useState<boolean>(true);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(false);\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\n\n    const lastQuestionRef = useRef<string>(\"\");\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [isStreaming, setIsStreaming] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\n    const [answers, setAnswers] = useState<[user: string, response: AskResponse][]>([]);\n    const [streamedAnswers, setStreamedAnswers] = useState<[user: string, response: AskResponse][]>([]);\n\n    const handleAsyncRequest = async (question: string, answers: [string, AskResponse][], setAnswers: Function, responseBody: ReadableStream<any>) => {\n        let answer: string = \"\";\n        let askResponse: AskResponse = {} as AskResponse;\n\n        const updateState = (newContent: string) => {\n            return new Promise(resolve => {\n                setTimeout(() => {\n                    answer += newContent;\n                    const latestResponse: AskResponse = { ...askResponse, answer };\n                    setStreamedAnswers([...answers, [question, latestResponse]]);\n                    resolve(null);\n                }, 33);\n            });\n        };\n        try {\n            setIsStreaming(true);\n            for await (const event of readNDJSONStream(responseBody)) {\n                if (event[\"data_points\"]) {\n                    askResponse = event;\n                } else if (event[\"choices\"] && event[\"choices\"][0][\"delta\"][\"content\"]) {\n                    setIsLoading(false);\n                    await updateState(event[\"choices\"][0][\"delta\"][\"content\"]);\n                }\n            }\n        } finally {\n            setIsStreaming(false);\n        }\n        const fullResponse: AskResponse = { ...askResponse, answer };\n        return fullResponse;\n    };\n\n    const client = useLogin ? useMsal().instance : undefined;\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n\n        const token = client ? await getToken(client) : undefined;\n\n        try {\n            const history: ChatTurn[] = answers.map(a => ({ user: a[0], bot: a[1].answer }));\n            const request: ChatRequest = {\n                history: [...history, { user: question, bot: undefined }],\n                approach: Approaches.ReadRetrieveRead,\n                shouldStream: shouldStream,\n                overrides: {\n                    promptTemplate: promptTemplate.length === 0 ? undefined : promptTemplate,\n                    excludeCategory: excludeCategory.length === 0 ? undefined : excludeCategory,\n                    top: retrieveCount,\n                    retrievalMode: retrievalMode,\n                    semanticRanker: useSemanticRanker,\n                    semanticCaptions: useSemanticCaptions,\n                    suggestFollowupQuestions: useSuggestFollowupQuestions,\n                    useOidSecurityFilter: useOidSecurityFilter,\n                    useGroupsSecurityFilter: useGroupsSecurityFilter\n                },\n                idToken: token?.accessToken\n            };\n\n            const response = await chatApi(request);\n            if (!response.body) {\n                throw Error(\"No response body\");\n            }\n            if (shouldStream) {\n                const parsedResponse: AskResponse = await handleAsyncRequest(question, answers, setAnswers, response.body);\n                setAnswers([...answers, [question, parsedResponse]]);\n            } else {\n                const parsedResponse: AskResponse = await response.json();\n                if (response.status > 299 || !response.ok) {\n                    throw Error(parsedResponse.error || \"Unknown error\");\n                }\n                setAnswers([...answers, [question, parsedResponse]]);\n            }\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const clearChat = () => {\n        lastQuestionRef.current = \"\";\n        error && setError(undefined);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n        setAnswers([]);\n        setStreamedAnswers([]);\n        setIsLoading(false);\n        setIsStreaming(false);\n    };\n\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"auto\" }), [streamedAnswers]);\n\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplate(newValue || \"\");\n    };\n\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setRetrieveCount(parseInt(newValue || \"3\"));\n    };\n\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined, index?: number | undefined) => {\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\n    };\n\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticRanker(!!checked);\n    };\n\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticCaptions(!!checked);\n    };\n\n    const onShouldStreamChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setShouldStream(!!checked);\n    };\n\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\n        setExcludeCategory(newValue || \"\");\n    };\n\n    const onUseSuggestFollowupQuestionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSuggestFollowupQuestions(!!checked);\n    };\n\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseOidSecurityFilter(!!checked);\n    };\n\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseGroupsSecurityFilter(!!checked);\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n    };\n\n    const onShowCitation = (citation: string, index: number) => {\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveCitation(citation);\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.commandsContainer}>\n                {/* <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} /> */}\n                {/* <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} /> */}\n            </div>\n            <div className={styles.chatRoot}>\n                <div className={styles.chatContainer}>\n                    {!lastQuestionRef.current ? (\n                        <div className={styles.chatEmptyState}>\n                            {/* <SparkleFilled fontSize={\"120px\"} primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Chat logo\" /> */}\n                            {/* <h2 className={styles.chatEmptyStateTitle}>Start Chatting...</h2> */}\n                            <h2 className={styles.chatEmptyStateSubtitle}>Start Chatting...or try an example</h2>\n                            <ExampleList onExampleClicked={onExampleClicked} />\n                        </div>\n                    ) : (\n                        <div className={styles.chatMessageStream}>\n                            {isStreaming &&\n                                streamedAnswers.map((streamedAnswer, index) => (\n                                    <div key={index}>\n                                        <UserChatMessage message={streamedAnswer[0]} />\n                                        <div className={styles.chatMessageGpt}>\n                                            <Answer\n                                                isStreaming={true}\n                                                key={index}\n                                                answer={streamedAnswer[1]}\n                                                isSelected={false}\n                                                onCitationClicked={c => onShowCitation(c, index)}\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            {!isStreaming &&\n                                answers.map((answer, index) => (\n                                    <div key={index}>\n                                        <UserChatMessage message={answer[0]} />\n                                        <div className={styles.chatMessageGpt}>\n                                            <Answer\n                                                isStreaming={false}\n                                                key={index}\n                                                answer={answer[1]}\n                                                isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\n                                                onCitationClicked={c => onShowCitation(c, index)}\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            {isLoading && (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerLoading />\n                                    </div>\n                                </>\n                            )}\n                            {error ? (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                                    </div>\n                                </>\n                            ) : null}\n                            <div ref={chatMessageStreamEnd} />\n                        </div>\n                    )}\n\n                    <div className={styles.chatInput}>\n                        <QuestionInput\n                            clearOnSend\n                            placeholder=\"Type a new question (e.g. does WBSO help save taxes?)\"\n                            disabled={isLoading}\n                            onSend={question => makeApiRequest(question)}\n                        />\n                        <Checkbox\n                            className={styles.chatSettingsSeparator}\n                            checked={useSemanticRanker}\n                            label=\"Use Cognitive Search\"\n                            onChange={onUseSemanticRankerChange}\n                        />\n                    </div>\n                    <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\n                </div>\n\n                {answers.length > 0 && activeAnalysisPanelTab && (\n                    <AnalysisPanel\n                        className={styles.chatAnalysisPanel}\n                        activeCitation={activeCitation}\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\n                        citationHeight=\"810px\"\n                        answer={answers[selectedAnswer][1]}\n                        activeTab={activeAnalysisPanelTab}\n                    />\n                )}\n\n                <Panel\n                    headerText=\"Configure answer generation\"\n                    isOpen={isConfigPanelOpen}\n                    isBlocking={false}\n                    onDismiss={() => setIsConfigPanelOpen(false)}\n                    closeButtonAriaLabel=\"Close\"\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\n                    isFooterAtBottom={true}\n                >\n                    {/* <TextField\n                        className={styles.chatSettingsSeparator}\n                        defaultValue={promptTemplate}\n                        label=\"Override prompt template\"\n                        multiline\n                        autoAdjustHeight\n                        onChange={onPromptTemplateChange}\n                    /> */}\n\n                    {/* <SpinButton\n                        className={styles.chatSettingsSeparator}\n                        label=\"Retrieve this many search results:\"\n                        min={1}\n                        max={50}\n                        defaultValue={retrieveCount.toString()}\n                        onChange={onRetrieveCountChange}\n                    /> */}\n                    {/* <TextField className={styles.chatSettingsSeparator} label=\"Exclude category\" onChange={onExcludeCategoryChanged} /> */}\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useSemanticRanker}\n                        label=\"Use Cognitive Search\"\n                        onChange={onUseSemanticRankerChange}\n                    />\n                    {/* <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useSemanticCaptions}\n                        label=\"Use query-contextual summaries instead of whole documents\"\n                        onChange={onUseSemanticCaptionsChange}\n                        disabled={!useSemanticRanker}\n                    /> */}\n                    {/* <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useSuggestFollowupQuestions}\n                        label=\"Suggest follow-up questions\"\n                        onChange={onUseSuggestFollowupQuestionsChange}\n                    /> */}\n                    {useLogin && (\n                        <Checkbox\n                            className={styles.chatSettingsSeparator}\n                            checked={useOidSecurityFilter}\n                            label=\"Use oid security filter\"\n                            disabled={!client?.getActiveAccount()}\n                            onChange={onUseOidSecurityFilterChange}\n                        />\n                    )}\n                    {useLogin && (\n                        <Checkbox\n                            className={styles.chatSettingsSeparator}\n                            checked={useGroupsSecurityFilter}\n                            label=\"Use groups security filter\"\n                            disabled={!client?.getActiveAccount()}\n                            onChange={onUseGroupsSecurityFilterChange}\n                        />\n                    )}\n                    <Dropdown\n                        className={styles.chatSettingsSeparator}\n                        label=\"Retrieval mode\"\n                        options={[\n                            { key: \"hybrid\", text: \"Vectors + Text (Hybrid)\", selected: retrievalMode == RetrievalMode.Hybrid, data: RetrievalMode.Hybrid },\n                            { key: \"vectors\", text: \"Vectors\", selected: retrievalMode == RetrievalMode.Vectors, data: RetrievalMode.Vectors },\n                            { key: \"text\", text: \"Text\", selected: retrievalMode == RetrievalMode.Text, data: RetrievalMode.Text }\n                        ]}\n                        required\n                        onChange={onRetrievalModeChange}\n                    />\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={shouldStream}\n                        label=\"Stream chat completion responses\"\n                        onChange={onShouldStreamChange}\n                    />\n                    {useLogin && <TokenClaimsDisplay />}\n                </Panel>\n            </div>\n        </div>\n    );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\nimport { initializeIcons } from \"@fluentui/react\";\nimport { MsalProvider } from '@azure/msal-react';\nimport { PublicClientApplication, EventType, AccountInfo } from '@azure/msal-browser';\nimport { msalConfig, useLogin } from './authConfig';\n\nimport \"./index.css\";\n\nimport Layout from \"./pages/layout/Layout\";\nimport Chat from \"./pages/chat/Chat\";\n\nvar layout;\nif (useLogin) {\n    var msalInstance = new PublicClientApplication(msalConfig);\n\n    // Default to using the first account if no account is active on page load\n    if (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\n        // Account selection logic is app dependent. Adjust as needed for different use cases.\n        msalInstance.setActiveAccount(msalInstance.getActiveAccount());\n    }\n\n    // Listen for sign-in event and set active account\n    msalInstance.addEventCallback((event) => {\n        if (event.eventType === EventType.LOGIN_SUCCESS && event.payload) {\n            const account = event.payload as AccountInfo;\n            msalInstance.setActiveAccount(account);\n        }\n    });\n\n    layout = (\n        <MsalProvider instance={msalInstance}>\n            <Layout />\n        </MsalProvider>\n    )\n} else {\n    layout = <Layout />\n}\n\ninitializeIcons();\n\nconst router = createHashRouter([\n    {\n        path: \"/\",\n        element: layout,\n        children: [\n            {\n                index: true,\n                element: <Chat />\n            },\n            {\n                path: \"qa\",\n                lazy: () => import(\"./pages/oneshot/OneShot\")\n            },\n            {\n                path: \"*\",\n                lazy: () => import(\"./pages/NoPage\")\n            }\n        ]\n    }\n]);\n\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\n    <React.StrictMode>\n        <RouterProvider router={router} />\n    </React.StrictMode>\n);\n"],"file":"assets/index-fb2930f2.js"}