{"version":3,"file":"OneShot-8c4d052f.js","sources":["../../../frontend/src/pages/oneshot/OneShot.tsx"],"sourcesContent":["import { useRef, useState } from \"react\";\nimport { Checkbox, ChoiceGroup, IChoiceGroupOption, Panel, DefaultButton, Spinner, TextField, SpinButton, IDropdownOption, Dropdown } from \"@fluentui/react\";\n\nimport styles from \"./OneShot.module.css\";\n\nimport { askApi, Approaches, AskResponse, AskRequest, RetrievalMode } from \"../../api\";\nimport { Answer, AnswerError } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { SettingsButton } from \"../../components/SettingsButton/SettingsButton\";\nimport { useLogin, getToken } from \"../../authConfig\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\n\nexport function Component(): JSX.Element {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [approach, setApproach] = useState<Approaches>(Approaches.RetrieveThenRead);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [promptTemplatePrefix, setPromptTemplatePrefix] = useState<string>(\"\");\n    const [promptTemplateSuffix, setPromptTemplateSuffix] = useState<string>(\"\");\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\n\n    const lastQuestionRef = useRef<string>(\"\");\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n    const [answer, setAnswer] = useState<AskResponse>();\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const client = useLogin ? useMsal().instance : undefined;\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n\n        const token = client ? await getToken(client) : undefined;\n\n        try {\n            const request: AskRequest = {\n                question,\n                approach,\n                overrides: {\n                    promptTemplate: promptTemplate.length === 0 ? undefined : promptTemplate,\n                    promptTemplatePrefix: promptTemplatePrefix.length === 0 ? undefined : promptTemplatePrefix,\n                    promptTemplateSuffix: promptTemplateSuffix.length === 0 ? undefined : promptTemplateSuffix,\n                    excludeCategory: excludeCategory.length === 0 ? undefined : excludeCategory,\n                    top: retrieveCount,\n                    retrievalMode: retrievalMode,\n                    semanticRanker: useSemanticRanker,\n                    semanticCaptions: useSemanticCaptions,\n                    useOidSecurityFilter: useOidSecurityFilter,\n                    useGroupsSecurityFilter: useGroupsSecurityFilter\n                },\n                idToken: token?.accessToken\n            };\n            const result = await askApi(request);\n            setAnswer(result);\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplate(newValue || \"\");\n    };\n\n    const onPromptTemplatePrefixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplatePrefix(newValue || \"\");\n    };\n\n    const onPromptTemplateSuffixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplateSuffix(newValue || \"\");\n    };\n\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setRetrieveCount(parseInt(newValue || \"3\"));\n    };\n\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined, index?: number | undefined) => {\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\n    };\n\n    const onApproachChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IChoiceGroupOption) => {\n        setApproach((option?.key as Approaches) || Approaches.RetrieveThenRead);\n    };\n\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticRanker(!!checked);\n    };\n\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticCaptions(!!checked);\n    };\n\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\n        setExcludeCategory(newValue || \"\");\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n    };\n\n    const onShowCitation = (citation: string) => {\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveCitation(citation);\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        }\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs) => {\n        if (activeAnalysisPanelTab === tab) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n    };\n\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseOidSecurityFilter(!!checked);\n    };\n\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseGroupsSecurityFilter(!!checked);\n    };\n\n    const approaches: IChoiceGroupOption[] = [\n        {\n            key: Approaches.RetrieveThenRead,\n            text: \"Retrieve-Then-Read\"\n        },\n        {\n            key: Approaches.ReadRetrieveRead,\n            text: \"Read-Retrieve-Read\"\n        },\n        {\n            key: Approaches.ReadDecomposeAsk,\n            text: \"Read-Decompose-Ask\"\n        }\n    ];\n\n    return (\n        <div className={styles.oneshotContainer}>\n            <h1>Work in Progress</h1>\n            {/* <div className={styles.oneshotTopSection}>\n                <SettingsButton className={styles.settingsButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\n                <h1 className={styles.oneshotTitle}>Ask your data</h1>\n                <div className={styles.oneshotQuestionInput}>\n                    <QuestionInput placeholder=\"Example: Does WBSO help me save taxes?\" disabled={isLoading} onSend={question => makeApiRequest(question)} />\n                </div>\n            </div>\n            <div className={styles.oneshotBottomSection}>\n                {isLoading && <Spinner label=\"Generating answer\" />}\n                {!lastQuestionRef.current && <ExampleList onExampleClicked={onExampleClicked} />}\n                {!isLoading && answer && !error && (\n                    <div className={styles.oneshotAnswerContainer}>\n                        <Answer\n                            answer={answer}\n                            isStreaming={false}\n                            onCitationClicked={x => onShowCitation(x)}\n                            onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab)}\n                            onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab)}\n                        />\n                    </div>\n                )}\n                {error ? (\n                    <div className={styles.oneshotAnswerContainer}>\n                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                    </div>\n                ) : null}\n                {activeAnalysisPanelTab && answer && (\n                    <AnalysisPanel\n                        className={styles.oneshotAnalysisPanel}\n                        activeCitation={activeCitation}\n                        onActiveTabChanged={x => onToggleTab(x)}\n                        citationHeight=\"600px\"\n                        answer={answer}\n                        activeTab={activeAnalysisPanelTab}\n                    />\n                )}\n            </div>\n\n            <Panel\n                headerText=\"Configure answer generation\"\n                isOpen={isConfigPanelOpen}\n                isBlocking={false}\n                onDismiss={() => setIsConfigPanelOpen(false)}\n                closeButtonAriaLabel=\"Close\"\n                onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\n                isFooterAtBottom={true}\n            >\n                <ChoiceGroup\n                    className={styles.oneshotSettingsSeparator}\n                    label=\"Approach\"\n                    options={approaches}\n                    defaultSelectedKey={approach}\n                    onChange={onApproachChange}\n                />\n\n                {(approach === Approaches.RetrieveThenRead || approach === Approaches.ReadDecomposeAsk) && (\n                    <TextField\n                        className={styles.oneshotSettingsSeparator}\n                        defaultValue={promptTemplate}\n                        label=\"Override prompt template\"\n                        multiline\n                        autoAdjustHeight\n                        onChange={onPromptTemplateChange}\n                    />\n                )}\n\n                {approach === Approaches.ReadRetrieveRead && (\n                    <>\n                        <TextField\n                            className={styles.oneshotSettingsSeparator}\n                            defaultValue={promptTemplatePrefix}\n                            label=\"Override prompt prefix template\"\n                            multiline\n                            autoAdjustHeight\n                            onChange={onPromptTemplatePrefixChange}\n                        />\n                        <TextField\n                            className={styles.oneshotSettingsSeparator}\n                            defaultValue={promptTemplateSuffix}\n                            label=\"Override prompt suffix template\"\n                            multiline\n                            autoAdjustHeight\n                            onChange={onPromptTemplateSuffixChange}\n                        />\n                    </>\n                )}\n\n                <SpinButton\n                    className={styles.oneshotSettingsSeparator}\n                    label=\"Retrieve this many search results:\"\n                    min={1}\n                    max={50}\n                    defaultValue={retrieveCount.toString()}\n                    onChange={onRetrieveCountChange}\n                />\n                <TextField className={styles.oneshotSettingsSeparator} label=\"Exclude category\" onChange={onExcludeCategoryChanged} />\n                <Checkbox\n                    className={styles.oneshotSettingsSeparator}\n                    checked={useSemanticRanker}\n                    label=\"Use semantic ranker for retrieval\"\n                    onChange={onUseSemanticRankerChange}\n                />\n                <Checkbox\n                    className={styles.oneshotSettingsSeparator}\n                    checked={useSemanticCaptions}\n                    label=\"Use query-contextual summaries instead of whole documents\"\n                    onChange={onUseSemanticCaptionsChange}\n                    disabled={!useSemanticRanker}\n                />\n                {useLogin && (\n                    <Checkbox\n                        className={styles.oneshotSettingsSeparator}\n                        checked={useOidSecurityFilter}\n                        label=\"Use oid security filter\"\n                        disabled={!client?.getActiveAccount()}\n                        onChange={onUseOidSecurityFilterChange}\n                    />\n                )}\n                {useLogin && (\n                    <Checkbox\n                        className={styles.oneshotSettingsSeparator}\n                        checked={useGroupsSecurityFilter}\n                        label=\"Use groups security filter\"\n                        disabled={!client?.getActiveAccount()}\n                        onChange={onUseGroupsSecurityFilterChange}\n                    />\n                )}\n                <Dropdown\n                    className={styles.oneshotSettingsSeparator}\n                    label=\"Retrieval mode\"\n                    options={[\n                        { key: \"hybrid\", text: \"Vectors + Text (Hybrid)\", selected: retrievalMode == RetrievalMode.Hybrid, data: RetrievalMode.Hybrid },\n                        { key: \"vectors\", text: \"Vectors\", selected: retrievalMode == RetrievalMode.Vectors, data: RetrievalMode.Vectors },\n                        { key: \"text\", text: \"Text\", selected: retrievalMode == RetrievalMode.Text, data: RetrievalMode.Text }\n                    ]}\n                    required\n                    onChange={onRetrievalModeChange}\n                />\n                {useLogin && <TokenClaimsDisplay />}\n            </Panel> */}\n        </div>\n    );\n}\n\nComponent.displayName = \"OneShot\";\n"],"names":["Component","useState","Approaches","RetrievalMode","useRef","useLogin","useMsal","jsx","styles"],"mappings":"6qBAeO,SAASA,GAAyB,CACaC,OAAAA,EAAAA,SAAS,EAAK,EAChCA,EAAA,SAAqBC,EAAW,gBAAgB,EACpCD,EAAAA,SAAiB,EAAE,EACPA,EAAAA,SAAiB,EAAE,EACnBA,EAAAA,SAAiB,EAAE,EACjCA,EAAA,SAAwBE,EAAc,MAAM,EAC5CF,EAAAA,SAAiB,CAAC,EACVA,EAAAA,SAAkB,EAAI,EAClBA,EAAAA,SAAkB,EAAK,EAC/BA,EAAAA,SAAiB,EAAE,EACTA,EAAAA,SAAkB,EAAK,EACjBA,EAAAA,SAAkB,EAAK,EAE7DG,EAAAA,OAAe,EAAE,EAEPH,EAAAA,SAAkB,EAAK,EAC/BA,WAAkB,EAChBA,WAAsB,EAENA,WAAiB,EACDA,WAAwC,MAAS,EAE9FI,GAAWC,EAAQ,EAAE,SA0GvBJ,EAAW,iBAIXA,EAAW,iBAIXA,EAAW,iBAMpBK,EAAA,IAAC,OAAI,UAAWC,EAAO,iBACnB,SAACD,EAAA,IAAA,KAAA,CAAG,2BAAgB,CAAA,CA6IxB,CAAA,CAER,CAEAP,EAAU,YAAc"}